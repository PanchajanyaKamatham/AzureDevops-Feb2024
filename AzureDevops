
AzureDevops 

IAC - Infrastructure as a code

ARMTemplates
Terraform 

AzureDevops - SAAS

Azure Boards (Agile, scrum)
Azure Repo (Git, Github)
Azure Pipeline (CI & CD)

Docker 
AKS


Why IAC?

1. Automated way of deployment
2. Delcarative code 
3. Repeatable 
4. Preductable

JSON Data types:
    https://www.w3schools.com/js/js_json_datatypes.asp

ARMTemplates structure / Elements:

Schema
Contentversion
Parameters
Variables
Resources
Outputs

ARMTemplates documentation:

https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/

https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/quickstart-create-templates-use-visual-studio-code?tabs=CLI

https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/syntax

Helper functions:
---------------
resourcegroup().location
dependsOn
concat
toLower
toUpper
resourceId
copyIndex()

Deployment Mode: 
    - Incremental 
    - Complete


Incremental:
ARM-Group --> 30 storage account (storage.template.json)
          --> VM (vm.template.json)

Complete: 
ARM-Group --> 30 storage account (storage.template.json)
          --> VM (vm.template.json)

deploy multiple resources in multiple locations:
-----------------------------------------------
"parameters": {  
  "location": {  
    "type": "array",  
    "defaultValue": [  
      "contoso",  
      "fabrikam",  
      "coho"  
    ]  
  }  
},  
"resources": [  
  {  
    "name": "[concat('storage', parameters('location')[copyIndex()])]",  
    "copy": {  
      "name": "storagecopy",  
      "count": "[length(parameters('location'))]"  
    },  
    ...  
  }  
]


Terraform: IAC Tool
---------

ARMTemplates                                              Terraform
------------                                              ----------
1. IAC                                                    1. IAC 
2. Specific to Azure                                      2. Open source (Azure, AWS, GCP, onprem etc)
3. JSON format                                            3. HCL (Hashicorp configuration language) format
4. file extension .JSON                                   4. file extension .tf
5. template.json                                          5. main.tf
   parameters.json                                           variables.tf
6. Structure of ARMTemplates                              6. Building blocks of terraform
  Schema                                                      provider
  ContentVersion                                              resources
  Parameters                                                  outputs
  Variables
  Resources
  Fuctions
  outputs
7. Deploy using powershell/CLI                            7. Lifecyble of terraform
  New-AzResourceGroupDeployment `                             terraform init
  -ResourceGroupName "" `                                     terraform fmt
  -TemplateFile "" `                                          terraform validate
  -TemplateParameterFile "" `                                 terraform plan
  -Verbose                                                    terraform apply 
                                                              terraform destroy

Getting started with terraform:
------------------------------
Download terraform: https://developer.hashicorp.com/terraform/install

Extract the terraformxxxxx.zip --> terraform.exe --> copy this file to c:/windows

tovalidate it --> open any terminal (cmd/powershell) --> terraform

VSCode --> Extensions --> -HashiCorp Terraform and -Azure Terraform

terraform init
terraform fmt
terraform validate
terraform plan
terraform apply -auto-approve
terraform destroy -auto-approve

Terraform data sources:
----------------------
Re-using the existing resource configuration

Azure portal - RG, VNET/SNET

deploy a VM

Refer keyvault to get the secrets

Azure terraform backend:
-----------------------
Azure storage account --> container --> terraform.tfstate

Authentication to azure using service principal

client_id: 637b02ee-cb65-48fe-8ac8-9635b399412c
tenant_id: 459865f1-a8aa-450a-baec-8b47a9e5c904
secret: 8v78Q~ou8QBcUfXT643.UfuJpk8JHtqGMujjgc2i
subscription_id: 2e28c82c-17d7-4303-b27a-4141b3d4088f


Multi resource deployment:
-------------------------
ARMTemplates - copyindex()
Terraform -> count.index
          -> for_each

ResourceGroup
VNET/SNET     - NO
NSG           - NO
NIC           - YES
StorageAccount - NO
VM             - YES
OSDisk         - YES
Publicip       - YES


Terraform Modules:
-----------------
 Re-using the existing terraform config files
  - VM
  - Storage
  - VNET
  - Webapp
  - SQL 


Local Module
Remote module

Terraform scenario:
------------------

main.tf -> VM deployed

datadisk to VM (manually)

terraform plan --> terraform.tfstate

add 0  change  0  destroy 0


terraform import azurerm_data_disk.example <resourceid>


main.tf --> vm 

deleted vm (manually)
 
terraform.tfstate

terraform apply


terraform-vm
terraform-vnet
terraform-subnet

AzureDevops Services: VSTS
--------------------
1. Azure boards
2. Azure Repos
3. Azure Pipelines
4. Azure test plans
5. Azure Artifacts

Azure portal: Portal.azure.com
Azuredevops:  dev.azure.com

https://dev.azure.com/Feb-2024/SAANVIKIT

Azure boards:
------------
Agile methodology 

Sprint model - 2 weeks 

Sprint1   March 4 - March 15
Sprint2   March 18 - March 29
Sprint3   April 1 - April 12
Sprint4   April 15 - April 26

Sprint  planning (1 - 2hrs)
  - Backlogs (work items to deliver)
  - Capacity planning (team capacity)

Daily standup calls (15 - 30min)
  - what you have done yesterday
  - what are you going to do today
  - Blocker to call out

Retrospective (1 - 2hrs)
  - what went well
  - what didn't went well
  - what can be improved


Agile workflow:
--------------
Epic
  \_
    Feature
      \_
        Userstory
          \_
            tasks
              \_
                issues

Epic          develop an application like amazon.in
Feature       Singup page
(Backlogs)    login page
              Home page
              product catalog
              payment gateway
              tracking 
              support 
Userstory     Singup page with email and password
              Singup page with Google
              Singup page with facebook
              Signup page with apple

              login with email and pasword
              login with google account
              login with facebook
              login with apple

task          Singup page with email and password (16hr)
issue         create a issue


Azure Repo's: (Git)
------------

Version control system:
  - Centralized version control system
  - Distributed version control system (git)

  784  git clone https://Feb-2024@dev.azure.com/Feb-2024/SAANVIKIT/_git/SAANVIKIT
  785  git config --global user.name "ramakrishna"
  786  git config --global user.email saanvikitfeb2024@gmail.com
  787  cd SAANVIKIT
  788  git status
  789  git add .
  790  git status
  791  git commit -m "New file added"
  792  git status
  793  git push origin main
  794  git push origin main
  795  git push origin main
  796  git --all
  797  git --all
  798  git push origin main

       git branch
  809  git branch --all
  810  git branch --all
  811  git fetch --all
  812  git branch
  813  git checkout develop
  814  git branch
  815  git branch --all
  816  git branch
  817  git checkout -b feature/vm-size
  818  git status
  819  git add .
  820  git status
  821  git commit -m "vm size modified"
  822  git push origin feature/vm-size

  866  git push -d origin feature/remove-spn
  867  git branc --all
  868  git branch --all
  869  git pull
  870  git fetch 
  871  git branch --all
  872  git puh -d origin feature/vm-size
  873  git push -d origin feature/vm-size
  874  clear
  875  git branch
  876  git status
  877  git add .
  878  git commit -m "removed username"
  879  git log
  880  git revet e58ea129881d1acd3a9fe961414272bec0074233
  881  git revert e58ea129881d1acd3a9fe961414272bec0074233


Git Commands:
-------------
  git config --global user.name "ramakrishna"
  git config --global user.eamil "azureramakrishna@gmail.com"

  git clone <cloning ulr>                 To clone remote repository to local

  git status                              see the changes of files and folders
  git add .                               add the files to local staging directory
  git commit -m "commit message"          commit the changes to your local repository
  git push origin main                    push the local branch to remote

  git checkout <branch-name>              switch the branch 
  git checkout -b <branch-name>           create a new branch

  git pull  (fetch + merge)               bring all the changes and merge of remote branch to local branch
  git fetch                               brings the information of remote branch to local branch

  git merge develop                       merge the changes of another branch to active branch

  git branch -d <branch-name>             delete the local branch
  git push -d origin <branch-name>        delete the remote branch

  git log                                 list all the commit history
  git revert <commit-id>                  revert the changes

  git branch                              list all the local branches
  git branch --all                        list all the local and remote branches
