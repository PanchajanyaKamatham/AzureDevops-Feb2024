
AzureDevops 

IAC - Infrastructure as a code

ARMTemplates
Terraform 

AzureDevops - SAAS

Azure Boards (Agile, scrum)
Azure Repo (Git, Github)
Azure Pipeline (CI & CD)

Docker 
AKS


Why IAC?

1. Automated way of deployment
2. Delcarative code 
3. Repeatable 
4. Preductable

JSON Data types:
    https://www.w3schools.com/js/js_json_datatypes.asp

ARMTemplates structure / Elements:

Schema
Contentversion
Parameters
Variables
Resources
Outputs

ARMTemplates documentation:

https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/

https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/quickstart-create-templates-use-visual-studio-code?tabs=CLI

https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/syntax

Helper functions:
---------------
resourcegroup().location
dependsOn
concat
toLower
toUpper
resourceId
copyIndex()

Deployment Mode: 
    - Incremental 
    - Complete


Incremental:
ARM-Group --> 30 storage account (storage.template.json)
          --> VM (vm.template.json)

Complete: 
ARM-Group --> 30 storage account (storage.template.json)
          --> VM (vm.template.json)

deploy multiple resources in multiple locations:
-----------------------------------------------
"parameters": {  
  "location": {  
    "type": "array",  
    "defaultValue": [  
      "contoso",  
      "fabrikam",  
      "coho"  
    ]  
  }  
},  
"resources": [  
  {  
    "name": "[concat('storage', parameters('location')[copyIndex()])]",  
    "copy": {  
      "name": "storagecopy",  
      "count": "[length(parameters('location'))]"  
    },  
    ...  
  }  
]


Terraform: IAC Tool
---------

ARMTemplates                                              Terraform
------------                                              ----------
1. IAC                                                    1. IAC 
2. Specific to Azure                                      2. Open source (Azure, AWS, GCP, onprem etc)
3. JSON format                                            3. HCL (Hashicorp configuration language) format
4. file extension .JSON                                   4. file extension .tf
5. template.json                                          5. main.tf
   parameters.json                                           variables.tf
6. Structure of ARMTemplates                              6. Building blocks of terraform
  Schema                                                      provider
  ContentVersion                                              resources
  Parameters                                                  outputs
  Variables
  Resources
  Fuctions
  outputs
7. Deploy using powershell/CLI                            7. Lifecyble of terraform
  New-AzResourceGroupDeployment `                             terraform init
  -ResourceGroupName "" `                                     terraform fmt
  -TemplateFile "" `                                          terraform validate
  -TemplateParameterFile "" `                                 terraform plan
  -Verbose                                                    terraform apply 
                                                              terraform destroy

Getting started with terraform:
------------------------------
Download terraform: https://developer.hashicorp.com/terraform/install

Extract the terraformxxxxx.zip --> terraform.exe --> copy this file to c:/windows

tovalidate it --> open any terminal (cmd/powershell) --> terraform

VSCode --> Extensions --> -HashiCorp Terraform and -Azure Terraform

terraform init
terraform fmt
terraform validate
terraform plan
terraform apply -auto-approve
terraform destroy -auto-approve

Terraform data sources:
----------------------
Re-using the existing resource configuration

Azure portal - RG, VNET/SNET

deploy a VM

Refer keyvault to get the secrets

Azure terraform backend:
-----------------------
Azure storage account --> container --> terraform.tfstate

Authentication to azure using service principal

client_id: 637b02ee-cb65-48fe-8ac8-9635b399412c
tenant_id: 459865f1-a8aa-450a-baec-8b47a9e5c904
secret: 8v78Q~ou8QBcUfXT643.UfuJpk8JHtqGMujjgc2i
subscription_id: 2e28c82c-17d7-4303-b27a-4141b3d4088f


Multi resource deployment:
-------------------------
ARMTemplates - copyindex()
Terraform -> count.index
          -> for_each

ResourceGroup
VNET/SNET     - NO
NSG           - NO
NIC           - YES
StorageAccount - NO
VM             - YES
OSDisk         - YES
Publicip       - YES


Terraform Modules:
-----------------
 Re-using the existing terraform config files
  - VM
  - Storage
  - VNET
  - Webapp
  - SQL 


Local Module
Remote module

Terraform scenario:
------------------

main.tf -> VM deployed

datadisk to VM (manually)

terraform plan --> terraform.tfstate

add 0  change  0  destroy 0


terraform import azurerm_data_disk.example <resourceid>


main.tf --> vm 

deleted vm (manually)
 
terraform.tfstate

terraform apply


terraform-vm
terraform-vnet
terraform-subnet

AzureDevops Services: VSTS
--------------------
1. Azure boards
2. Azure Repos
3. Azure Pipelines
4. Azure test plans
5. Azure Artifacts

Azure portal: Portal.azure.com
Azuredevops:  dev.azure.com

https://dev.azure.com/Feb-2024/SAANVIKIT

Azure boards:
------------
Agile methodology 

Sprint model - 2 weeks 

Sprint1   March 4 - March 15
Sprint2   March 18 - March 29
Sprint3   April 1 - April 12
Sprint4   April 15 - April 26

Sprint  planning (1 - 2hrs)
  - Backlogs (work items to deliver)
  - Capacity planning (team capacity)

Daily standup calls (15 - 30min)
  - what you have done yesterday
  - what are you going to do today
  - Blocker to call out

Retrospective (1 - 2hrs)
  - what went well
  - what didn't went well
  - what can be improved


Agile workflow:
--------------
Epic
  \_
    Feature
      \_
        Userstory
          \_
            tasks
              \_
                issues

Epic          develop an application like amazon.in
Feature       Singup page
(Backlogs)    login page
              Home page
              product catalog
              payment gateway
              tracking 
              support 
Userstory     Singup page with email and password
              Singup page with Google
              Singup page with facebook
              Signup page with apple

              login with email and pasword
              login with google account
              login with facebook
              login with apple

task          Singup page with email and password (16hr)
issue         create a issue


Azure Repo's: (Git)
------------

Version control system:
  - Centralized version control system
  - Distributed version control system (git)

  784  git clone https://Feb-2024@dev.azure.com/Feb-2024/SAANVIKIT/_git/SAANVIKIT
  785  git config --global user.name "ramakrishna"
  786  git config --global user.email saanvikitfeb2024@gmail.com
  787  cd SAANVIKIT
  788  git status
  789  git add .
  790  git status
  791  git commit -m "New file added"
  792  git status
  793  git push origin main
  794  git push origin main
  795  git push origin main
  796  git --all
  797  git --all
  798  git push origin main

       git branch
  809  git branch --all
  810  git branch --all
  811  git fetch --all
  812  git branch
  813  git checkout develop
  814  git branch
  815  git branch --all
  816  git branch
  817  git checkout -b feature/vm-size
  818  git status
  819  git add .
  820  git status
  821  git commit -m "vm size modified"
  822  git push origin feature/vm-size

  866  git push -d origin feature/remove-spn
  867  git branc --all
  868  git branch --all
  869  git pull
  870  git fetch 
  871  git branch --all
  872  git puh -d origin feature/vm-size
  873  git push -d origin feature/vm-size
  874  clear
  875  git branch
  876  git status
  877  git add .
  878  git commit -m "removed username"
  879  git log
  880  git revet e58ea129881d1acd3a9fe961414272bec0074233
  881  git revert e58ea129881d1acd3a9fe961414272bec0074233


Git Commands:
-------------
  git config --global user.name "ramakrishna"
  git config --global user.eamil "azureramakrishna@gmail.com"

  git clone <cloning ulr>                 To clone remote repository to local

  git status                              see the changes of files and folders
  git add .                               add the files to local staging directory
  git commit -m "commit message"          commit the changes to your local repository
  git push origin main                    push the local branch to remote

  git checkout <branch-name>              switch the branch 
  git checkout -b <branch-name>           create a new branch

  git pull  (fetch + merge)               bring all the changes and merge of remote branch to local branch
  git fetch                               brings the information of remote branch to local branch

  git merge develop                       merge the changes of another branch to active branch

  git branch -d <branch-name>             delete the local branch
  git push -d origin <branch-name>        delete the remote branch

  git log                                 list all the commit history
  git revert <commit-id>                  revert the changes

  git branch                              list all the local branches
  git branch --all                        list all the local and remote branches



AzureDevops Interview questions:
-------------------------------

1. What is IAC?
2. What are the advantages of using IAC?
3. what is ARMTemplates?
4. what is the structure / Elements of ARMTemplates
5. what is the difference between parameters and variables
6. what is the powershell/cli command to deploy the armtemplates 
7. what are the functions  you have used while writing ARMtemplates
8. If i want to create multiple resources using single template what is the fucnction we use?
9. what are the linked templates 
10. how do you call existing resources in to your armtemplate 

11. what is terraform 
12. what are the advantages of terraform over armtemplate (ARMtemplates vs terraform)
13. what are the building blocks of the terraform (provider, resources and outputs)
14. what is the lifecycle of terraform 
    terraform init
    terraform fmt
    terraform validate
    terraform plan
    terraform apply 
    terraform destroy 
15. what will happen when you execute each commands. explain in detailed
16. what is the difference between terraform validate and terraform plan
17. what is terraform locals?
18. how do you refere already existing resources in azure portal in to your terraform templates (datasources)
19. how do you import the existing resources in portal to your statefile and templates
20. what is terraform statefile 
21. where do you store your statefile?
22. what is terraform backend
23. what is the terraform provider for azure
24. what is the provider version you are using (3.70.0)
25. what is the terraform version you are using (v1.6.5)
26. you have created a VM using the terraform now the statefile got deleted. Now if you come and do apply what happens?
27. you have created a VM using terraform and some one went and created the data disk manually. now if you come and do terraform plan what happens
28. you have created a VM using terraform and some one deleted the VM manually. now if you go and do terraform apply what will happen
29. what is terraform for_each
30. what is the function we use to create multiple resources in terraform 
      - count.index
      - for_each
31. what is terraform provisioners 
32. what is the terraform drift 
33. how do you pass the variables during the apply
34. how do you unlock the statefile


Azure pipelines:
---------------

Pre-requisites:
  - Service Connection
      clinetid: 600bc481-f28d-4922-95de-10913f7f13bd
      tenantid: 459865f1-a8aa-450a-baec-8b47a9e5c904
      secret: Lpx8Q~wUm~aXaXiA4nz3PH3gLqocTFWyKsVmhdyd
      suscriptionid: 2e28c82c-17d7-4303-b27a-4141b3d4088f
  
  - Agents
      Microsoft Hosted agent(VM)
          Submit the request for access: https://aka.ms/azpipelines-parallelism-request 

      Self hosted agent

Azurepipeline 
  - Classic editor pipeline (GUI)
  - YAML pipeline

How to setup the CI CD for the  ARMTemplates 
CI (Continuous integration) - If any commits in source repository the build pipeline  will be triggered
CD (Continuous deployment) - If any new artifact generated the release pipeline will be triggered
CD (Continuours delivery) - Manulay deployment 


How to setup the CI CD for terraform:



Launch the Azure Cloud Shell from the portal. To deploy to a resource group, enter the following command

az group create --name MyResourceGroup --location westus

To create an App service plan

az appservice plan create --resource-group MyResourceGroup --name MyPlan --sku S1

Create the web app with a unique app name

az webapp create --resource-group MyResourceGroup --plan MyPlan --name saanvikit-java

Finally, create the MySQL server with a unique server name.

az mysql server create --resource-group MyResourceGroup --name saanvikitsqldbserver --admin-user mysqldbuser --admin-password P2ssw0rd@123 --sku-name GP_Gen5_2


Server Name: saanvikitsqldbserver.mysql.database.azure.com
Server admin login name: mysqldbuser@saanvikitsqldbserver


jdbc:mysql://saanvikitsqldbserver.mysql.database.azure.com:3306/saanvikitsqldbserver?useSSL=true&requireSSL=false"; myDbConn = DriverManager.getConnection(url, "mysqldbuser@saanvikitsqldbserver", P2ssw0rd@123);




Docker:
------
https://docs.docker.com/desktop/install/ubuntu/



    1  docker images
    2  clear
    3  docker run hello-world
    4  docker image
    5  docker images
    6  docker ps
    7  docker ps -a
    8  docker images
    9  docker run ubuntu
   10  docker ps -a
   11  docker images
   12  docker pull ubuntu:20.04
   13  docker images
   14  docker run ubuntu:20.04
   15  docker ps -a
   16  docker images
   17  docker run --name saanvikit -itd ubuntu
   18  docker ps
   19  docker attach 1275
   20  docker ps
   21  docker ps -a
   22  docker start 1275
   23  docker ps
   24  docker attach saanvikit
   25  docker ps
   26  docker images
   27  docker run --name test -it ubuntu:22.04
   28  docker ps
   29  docker stop 3df9cb320377 1275
   30  docker ps
   31  docker ps -a
   32  docker ps test saanvikit
   33  docker start test saanvikit
   34  docker ps
   35  docker images
   36  docker image rm ca2b
   37  docker image rm d2c9
   38  clear
   39  docker ps -a
   40  docker rm b63a
   41  docker ps -a
   42  docker rm 5cdc 8033
   43  docker ps -a
   44  docker images
   45  docker image rm d2c9
   46  docker images
   47  docker ps
   48  docker image rm 3cff
   49  docker images
   50  history
   51  systemctl status docker
   52  docker
   53  clear
   54  docker images
   55  docker ps
   56  docker run -it --name test ubuntu:22.04
   57  docker ps -a
   58  docker rm 3df9 1275
   59  docker ps -a
   60  docker run -it --name test ubuntu:22.04
   61  docker ps
   62  docker commit 2d2c saanvikitfeb/myubuntu:1.0
   63  docker images
   64  docker run -itd --name test-container saanvikitfeb/myubuntu:1.0
   65  docker ps
   66  docker attach feb4
   67  docker ps
   68  docker images
   69  docker login
   70  docker push saanvikitfeb/myubuntu:1.0
   71  docker ps
   72  docker attach feb4
   73  docker ps
   74  docker commit test-container saanvikitfeb/myubuntu:2.0
   75  docker image
   76  docker images
   77  docker run  -it --name test2 saanvikit/myubuntu:2.0
   78  docker run  -it --name test2 saanvikitfeb/myubuntu:2.0
   79  docker images
   80  docker push saanvikitfeb/myubuntu:2.0
   81  docker images
   82  docker images inspect saanvikitfeb/myubuntu:2.0
   83  docker image inspect saanvikitfeb/myubuntu:2.0
   84  docker images
   85  docker tag saanvikitfeb/myubuntu:2.0  saanvikitfeb/myubuntu:3.0
   86  docker images
   87  docker rmi saanvikitfeb/myubuntu:3.0
   88  docker images
   89  docker rmi ubuntu ubuntu:22.04 --force
   90  docker images
   91  docker ps
   92  docker inspect test2
   93  docker ps
   94  docker stats
   95  history

  946  git clone https://github.com/Azure-Samples/aci-helloworld.git
  947  cd aci-helloworld
  948  ls
  949  docker build -t aci-tutorail-app .
  950  docker build -t aci-tutorail-app .
  951  docker images
  952  az acr login --name saanvikit
  953  clear
  954  docker images
  955  docker tag aci-tutorial-app saanvikit.azurecr.io/aci-tutorail-app:1.0
  956  docker images
  957  docker tag aci-tutorail-app saanvikit.azurecr.io/aci-tutorail-app:1.0
  958  docker images
  959  docker push saanvikit.azurecr.io/aci-tutorail-app:1.0
  960  az acr update -n saanvikit  --admin-enabled true


Interview questions:
-------------------
1. tell me about agile process?
2. what is your sprint duration?
3. what is git ?
4. is git distributed vcs or centralized vcs?
5. git commands **
6. git pull vs git fetch
7. git branching strategies ?
8. what are the pipeline agents?
9. what is the difference between Microsft hosted agents vs selfhosted agents?
10. tell me step by step how do you configure the self hosted agent?
11. what is service connection and how do you establish to azure
12. what type of pipelines you have used classic editor or yaml pipelines?
13. can you explain your CI CD pipeline?
14. can you explain the any applicaiton CI CD process.
15. How do you maintain the secrects within your pipeline
16. what is library in azure pipelines?
17. what are the advantages using yaml pipelines vs classic editor 
18. what is CI and CD
19. what is contineous deployment vs contineous delivery
20. what is docker
21. what is container
22. docker commands ***
23. what is kubernetes
24. explain kubernetes architecture 
25. what is aks
26. explain aks creation process 
27. kubectl commands ***
28. what is azure conatiner instance?
29. what is azure container registry?
30. explain docker file 
