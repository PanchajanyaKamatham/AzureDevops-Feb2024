
AzureDevops 

IAC - Infrastructure as a code

ARMTemplates
Terraform 

AzureDevops - SAAS

Azure Boards (Agile, scrum)
Azure Repo (Git, Github)
Azure Pipeline (CI & CD)

Docker 
AKS


Why IAC?

1. Automated way of deployment
2. Delcarative code 
3. Repeatable 
4. Preductable

JSON Data types:
    https://www.w3schools.com/js/js_json_datatypes.asp

ARMTemplates structure / Elements:

Schema
Contentversion
Parameters
Variables
Resources
Outputs

ARMTemplates documentation:

https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/

https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/quickstart-create-templates-use-visual-studio-code?tabs=CLI

https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/syntax

Helper functions:
---------------
resourcegroup().location
dependsOn
concat
toLower
toUpper
resourceId
copyIndex()

Deployment Mode: 
    - Incremental 
    - Complete


Incremental:
ARM-Group --> 30 storage account (storage.template.json)
          --> VM (vm.template.json)

Complete: 
ARM-Group --> 30 storage account (storage.template.json)
          --> VM (vm.template.json)

deploy multiple resources in multiple locations:
-----------------------------------------------
"parameters": {  
  "location": {  
    "type": "array",  
    "defaultValue": [  
      "contoso",  
      "fabrikam",  
      "coho"  
    ]  
  }  
},  
"resources": [  
  {  
    "name": "[concat('storage', parameters('location')[copyIndex()])]",  
    "copy": {  
      "name": "storagecopy",  
      "count": "[length(parameters('location'))]"  
    },  
    ...  
  }  
]


Terraform: IAC Tool
---------

ARMTemplates                                              Terraform
------------                                              ----------
1. IAC                                                    1. IAC 
2. Specific to Azure                                      2. Open source (Azure, AWS, GCP, onprem etc)
3. JSON format                                            3. HCL (Hashicorp configuration language) format
4. file extension .JSON                                   4. file extension .tf
5. template.json                                          5. main.tf
   parameters.json                                           variables.tf
6. Structure of ARMTemplates                              6. Building blocks of terraform
  Schema                                                      provider
  ContentVersion                                              resources
  Parameters                                                  outputs
  Variables
  Resources
  Fuctions
  outputs
7. Deploy using powershell/CLI                            7. Lifecyble of terraform
  New-AzResourceGroupDeployment `                             terraform init
  -ResourceGroupName "" `                                     terraform fmt
  -TemplateFile "" `                                          terraform validate
  -TemplateParameterFile "" `                                 terraform plan
  -Verbose                                                    terraform apply 
                                                              terraform destroy

Getting started with terraform:
------------------------------
Download terraform: https://developer.hashicorp.com/terraform/install

Extract the terraformxxxxx.zip --> terraform.exe --> copy this file to c:/windows

tovalidate it --> open any terminal (cmd/powershell) --> terraform

VSCode --> Extensions --> -HashiCorp Terraform and -Azure Terraform

terraform init
terraform fmt
terraform validate
terraform plan
terraform apply -auto-approve
terraform destroy -auto-approve

Terraform data sources:
----------------------
Re-using the existing resource configuration

Azure portal - RG, VNET/SNET

deploy a VM

Refer keyvault to get the secrets

Azure terraform backend:
-----------------------
Azure storage account --> container --> terraform.tfstate

Authentication to azure using service principal

client_id: 637b02ee-cb65-48fe-8ac8-9635b399412c
tenant_id: 459865f1-a8aa-450a-baec-8b47a9e5c904
secret: 8v78Q~ou8QBcUfXT643.UfuJpk8JHtqGMujjgc2i
subscription_id: 2e28c82c-17d7-4303-b27a-4141b3d4088f


Multi resource deployment:
-------------------------
ARMTemplates - copyindex()
Terraform -> count.index
          -> for_each

ResourceGroup
VNET/SNET     - NO
NSG           - NO
NIC           - YES
StorageAccount - NO
VM             - YES
OSDisk         - YES
Publicip       - YES


Terraform Modules:
-----------------
 Re-using the existing terraform config files
  - VM
  - Storage
  - VNET
  - Webapp
  - SQL 


Local Module
Remote module

Terraform scenario:
------------------

main.tf -> VM deployed

datadisk to VM (manually)

terraform plan --> terraform.tfstate

add 0  change  0  destroy 0


terraform import azurerm_data_disk.example <resourceid>


main.tf --> vm 

deleted vm (manually)
 
terraform.tfstate

terraform apply


terraform-vm
terraform-vnet
terraform-subnet